// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// OMDBServiceClient is the client API for OMDBService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OMDBServiceClient interface {
	Search(ctx context.Context, in *Param, opts ...grpc.CallOption) (*SearchResult, error)
	Get(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*MovieDetailResult, error)
}

type oMDBServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOMDBServiceClient(cc grpc.ClientConnInterface) OMDBServiceClient {
	return &oMDBServiceClient{cc}
}

func (c *oMDBServiceClient) Search(ctx context.Context, in *Param, opts ...grpc.CallOption) (*SearchResult, error) {
	out := new(SearchResult)
	err := c.cc.Invoke(ctx, "/omdb.OMDBService/Search", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oMDBServiceClient) Get(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*MovieDetailResult, error) {
	out := new(MovieDetailResult)
	err := c.cc.Invoke(ctx, "/omdb.OMDBService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OMDBServiceServer is the server API for OMDBService service.
// All implementations must embed UnimplementedOMDBServiceServer
// for forward compatibility
type OMDBServiceServer interface {
	Search(context.Context, *Param) (*SearchResult, error)
	Get(context.Context, *wrapperspb.StringValue) (*MovieDetailResult, error)
	mustEmbedUnimplementedOMDBServiceServer()
}

// UnimplementedOMDBServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOMDBServiceServer struct {
}

func (UnimplementedOMDBServiceServer) Search(context.Context, *Param) (*SearchResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (UnimplementedOMDBServiceServer) Get(context.Context, *wrapperspb.StringValue) (*MovieDetailResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedOMDBServiceServer) mustEmbedUnimplementedOMDBServiceServer() {}

// UnsafeOMDBServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OMDBServiceServer will
// result in compilation errors.
type UnsafeOMDBServiceServer interface {
	mustEmbedUnimplementedOMDBServiceServer()
}

func RegisterOMDBServiceServer(s grpc.ServiceRegistrar, srv OMDBServiceServer) {
	s.RegisterService(&_OMDBService_serviceDesc, srv)
}

func _OMDBService_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Param)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OMDBServiceServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/omdb.OMDBService/Search",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OMDBServiceServer).Search(ctx, req.(*Param))
	}
	return interceptor(ctx, in, info, handler)
}

func _OMDBService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OMDBServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/omdb.OMDBService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OMDBServiceServer).Get(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

var _OMDBService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "omdb.OMDBService",
	HandlerType: (*OMDBServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Search",
			Handler:    _OMDBService_Search_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _OMDBService_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/omdb.proto",
}
